"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.DebugClient = void 0;
const fs = require("fs");
const constants = require("constants");
const cp = require("child_process");
const assert = require("assert");
const net = require("net");
const protocolClient_1 = require("./protocolClient");
class DebugClient extends protocolClient_1.ProtocolClient {
    /**
     * Creates a DebugClient object that provides a promise-based API to write
     * debug adapter tests.
     * A simple mocha example for setting and hitting a breakpoint in line 15 of a program 'test.js' looks like this:
     *
     * var dc;
     * setup( () => {
     *     dc = new DebugClient('node', './out/node/nodeDebug.js', 'node');
     *     return dc.start();
     * });
     * teardown( () => dc.stop() );
     *
     * test('should stop on a breakpoint', () => {
     *     return dc.hitBreakpoint({ program: 'test.js' }, 'test.js', 15);
     * });
     */
    constructor(debugAdapterRuntime, debugAdapterExecutable, debugType, spawnOptions, enableStderr) {
        super();
        this.defaultTimeout = 5000;
        this._runtime = debugAdapterRuntime;
        this._executable = debugAdapterExecutable;
        this._spawnOptions = spawnOptions;
        this._enableStderr = enableStderr;
        this._debugType = debugType;
        this._supportsConfigurationDoneRequest = false;
        if (DebugClient.CASE_INSENSITIVE_FILESYSTEM === undefined) {
            try {
                fs.accessSync(process.execPath.toLowerCase(), constants.F_OK);
                fs.accessSync(process.execPath.toUpperCase(), constants.F_OK);
                DebugClient.CASE_INSENSITIVE_FILESYSTEM = true;
            }
            catch (err) {
                DebugClient.CASE_INSENSITIVE_FILESYSTEM = false;
            }
        }
    }
    // ---- life cycle --------------------------------------------------------------------------------------------------------
    /**
     * Starts a new debug adapter and sets up communication via stdin/stdout.
     * If a port number is specified the adapter is not launched but a connection to
     * a debug adapter running in server mode is established. This is useful for debugging
     * the adapter while running tests. For this reason all timeouts are disabled in server mode.
     */
    start(port) {
        return new Promise((resolve, reject) => {
            if (typeof port === 'number') {
                this._socket = net.createConnection(port, '127.0.0.1', () => {
                    this.connect(this._socket, this._socket);
                    resolve();
                });
            }
            else {
                this._adapterProcess = cp.spawn(this._runtime, [this._executable], this._spawnOptions);
                const sanitize = (s) => s.toString().replace(/\r?\n$/mg, '');
                this._adapterProcess.stderr.on('data', (data) => {
                    if (this._enableStderr) {
                        console.log(sanitize(data));
                    }
                });
                this._adapterProcess.on('error', (err) => {
                    console.log(err);
                    reject(err);
                });
                this._adapterProcess.on('exit', (code, signal) => {
                    if (code) {
                        // done(new Error('debug adapter exit code: ' + code));
                    }
                });
                this.connect(this._adapterProcess.stdout, this._adapterProcess.stdin);
                resolve();
            }
        });
    }
    /**
     * Shutdown the debuggee and the debug adapter (or disconnect if in server mode).
     */
    stop() {
        return this.disconnectRequest().then(() => {
            this.stopAdapter();
        }).catch(() => {
            this.stopAdapter();
        });
    }
    stopAdapter() {
        if (this._adapterProcess) {
            this._adapterProcess.kill();
            this._adapterProcess = null;
        }
        if (this._socket) {
            this._socket.end();
            this._socket = null;
        }
    }
    // ---- protocol requests -------------------------------------------------------------------------------------------------
    initializeRequest(args) {
        if (!args) {
            args = {
                adapterID: this._debugType,
                linesStartAt1: true,
                columnsStartAt1: true,
                pathFormat: 'path'
            };
        }
        return this.send('initialize', args);
    }
    configurationDoneRequest(args) {
        return this.send('configurationDone', args);
    }
    launchRequest(args) {
        return this.send('launch', args);
    }
    attachRequest(args) {
        return this.send('attach', args);
    }
    restartRequest(args) {
        return this.send('restart', args);
    }
    terminateRequest(args) {
        return this.send('terminate', args);
    }
    disconnectRequest(args) {
        return this.send('disconnect', args);
    }
    setBreakpointsRequest(args) {
        return this.send('setBreakpoints', args);
    }
    setFunctionBreakpointsRequest(args) {
        return this.send('setFunctionBreakpoints', args);
    }
    setExceptionBreakpointsRequest(args) {
        return this.send('setExceptionBreakpoints', args);
    }
    dataBreakpointInfoRequest(args) {
        return this.send('dataBreakpointInfo', args);
    }
    setDataBreakpointsRequest(args) {
        return this.send('setDataBreakpoints', args);
    }
    continueRequest(args) {
        return this.send('continue', args);
    }
    nextRequest(args) {
        return this.send('next', args);
    }
    stepInRequest(args) {
        return this.send('stepIn', args);
    }
    stepOutRequest(args) {
        return this.send('stepOut', args);
    }
    stepBackRequest(args) {
        return this.send('stepBack', args);
    }
    reverseContinueRequest(args) {
        return this.send('reverseContinue', args);
    }
    restartFrameRequest(args) {
        return this.send('restartFrame', args);
    }
    gotoRequest(args) {
        return this.send('goto', args);
    }
    pauseRequest(args) {
        return this.send('pause', args);
    }
    stackTraceRequest(args) {
        return this.send('stackTrace', args);
    }
    scopesRequest(args) {
        return this.send('scopes', args);
    }
    variablesRequest(args) {
        return this.send('variables', args);
    }
    setVariableRequest(args) {
        return this.send('setVariable', args);
    }
    sourceRequest(args) {
        return this.send('source', args);
    }
    threadsRequest() {
        return this.send('threads');
    }
    modulesRequest(args) {
        return this.send('modules');
    }
    evaluateRequest(args) {
        return this.send('evaluate', args);
    }
    stepInTargetsRequest(args) {
        return this.send('stepInTargets', args);
    }
    gotoTargetsRequest(args) {
        return this.send('gotoTargets', args);
    }
    completionsRequest(args) {
        return this.send('completions', args);
    }
    exceptionInfoRequest(args) {
        return this.send('exceptionInfo', args);
    }
    customRequest(command, args) {
        return this.send(command, args);
    }
    // ---- convenience methods -----------------------------------------------------------------------------------------------
    /*
     * Returns a promise that will resolve if an event with a specific type was received within some specified time.
     * The promise will be rejected if a timeout occurs.
     */
    waitForEvent(eventType, timeout) {
        timeout = timeout || this.defaultTimeout;
        let timeoutHandler;
        return new Promise((resolve, reject) => {
            this.once(eventType, event => {
                clearTimeout(timeoutHandler);
                resolve(event);
            });
            if (!this._socket) { // no timeouts if debugging the tests
                timeoutHandler = setTimeout(() => {
                    reject(new Error(`no event '${eventType}' received after ${timeout} ms`));
                }, timeout);
            }
        });
    }
    /*
     * Returns a promise that will resolve if an 'initialized' event was received within some specified time
     * and a subsequent 'configurationDone' request was successfully executed.
     * The promise will be rejected if a timeout occurs or if the 'configurationDone' request fails.
     */
    configurationSequence() {
        return this.waitForEvent('initialized').then(event => {
            return this.configurationDone();
        });
    }
    /**
     * Returns a promise that will resolve if a 'initialize' and a 'launch' request were successful.
     */
    launch(launchArgs) {
        return this.initializeRequest().then(response => {
            if (response.body && response.body.supportsConfigurationDoneRequest) {
                this._supportsConfigurationDoneRequest = true;
            }
            return this.launchRequest(launchArgs);
        });
    }
    configurationDone() {
        if (this._supportsConfigurationDoneRequest) {
            return this.configurationDoneRequest();
        }
        else {
            // if debug adapter doesn't support the configurationDoneRequest we have to send the setExceptionBreakpointsRequest.
            return this.setExceptionBreakpointsRequest({ filters: ['all'] });
        }
    }
    /*
     * Returns a promise that will resolve if a 'stopped' event was received within some specified time
     * and the event's reason and line number was asserted.
     * The promise will be rejected if a timeout occurs, the assertions fail, or if the 'stackTrace' request fails.
     */
    assertStoppedLocation(reason, expected) {
        return this.waitForEvent('stopped').then(event => {
            assert.equal(event.body.reason, reason);
            return this.stackTraceRequest({
                threadId: event.body.threadId
            });
        }).then(response => {
            const frame = response.body.stackFrames[0];
            if (typeof expected.path === 'string' || expected.path instanceof RegExp) {
                this.assertPath(frame.source.path, expected.path, 'stopped location: path mismatch');
            }
            if (typeof expected.line === 'number') {
                assert.equal(frame.line, expected.line, 'stopped location: line mismatch');
            }
            if (typeof expected.column === 'number') {
                assert.equal(frame.column, expected.column, 'stopped location: column mismatch');
            }
            return response;
        });
    }
    assertPartialLocationsEqual(locA, locB) {
        if (locA.path) {
            this.assertPath(locA.path, locB.path, 'breakpoint verification mismatch: path');
        }
        if (typeof locA.line === 'number') {
            assert.equal(locA.line, locB.line, 'breakpoint verification mismatch: line');
        }
        if (typeof locB.column === 'number' && typeof locA.column === 'number') {
            assert.equal(locA.column, locB.column, 'breakpoint verification mismatch: column');
        }
    }
    /*
     * Returns a promise that will resolve if enough output events with the given category have been received
     * and the concatenated data match the expected data.
     * The promise will be rejected as soon as the received data cannot match the expected data or if a timeout occurs.
     */
    assertOutput(category, expected, timeout) {
        timeout = timeout || this.defaultTimeout;
        return new Promise((resolve, reject) => {
            let output = '';
            let timeoutHandler;
            this.on('output', event => {
                const e = event;
                if (e.body.category === category) {
                    output += e.body.output;
                    if (output.indexOf(expected) === 0) {
                        clearTimeout(timeoutHandler);
                        resolve(event);
                    }
                    else if (expected.indexOf(output) !== 0) {
                        const sanitize = (s) => s.toString().replace(/\r/mg, '\\r').replace(/\n/mg, '\\n');
                        reject(new Error(`received data '${sanitize(output)}' is not a prefix of the expected data '${sanitize(expected)}'`));
                    }
                }
            });
            if (!this._socket) { // no timeouts if debugging the tests
                timeoutHandler = setTimeout(() => {
                    reject(new Error(`not enough output data received after ${timeout} ms`));
                }, timeout);
            }
        });
    }
    assertPath(path, expected, message) {
        if (expected instanceof RegExp) {
            assert.ok(expected.test(path), message);
        }
        else {
            if (DebugClient.CASE_INSENSITIVE_FILESYSTEM) {
                if (typeof path === 'string') {
                    path = path.toLowerCase();
                }
                if (typeof expected === 'string') {
                    expected = expected.toLowerCase();
                }
            }
            assert.equal(path, expected, message);
        }
    }
    // ---- scenarios ---------------------------------------------------------------------------------------------------------
    /**
     * Returns a promise that will resolve if a configurable breakpoint has been hit within some time
     * and the event's reason and line number was asserted.
     * The promise will be rejected if a timeout occurs, the assertions fail, or if the requests fails.
     */
    hitBreakpoint(launchArgs, location, expectedStopLocation, expectedBPLocation) {
        return Promise.all([
            this.waitForEvent('initialized').then(event => {
                return this.setBreakpointsRequest({
                    lines: [location.line],
                    breakpoints: [{ line: location.line, column: location.column }],
                    source: { path: location.path }
                });
            }).then(response => {
                const bp = response.body.breakpoints[0];
                const verified = (typeof location.verified === 'boolean') ? location.verified : true;
                assert.equal(bp.verified, verified, 'breakpoint verification mismatch: verified');
                const actualLocation = {
                    column: bp.column,
                    line: bp.line,
                    path: bp.source && bp.source.path
                };
                this.assertPartialLocationsEqual(actualLocation, expectedBPLocation || location);
                return this.configurationDone();
            }),
            this.launch(launchArgs),
            this.assertStoppedLocation('breakpoint', expectedStopLocation || location)
        ]);
    }
}
exports.DebugClient = DebugClient;
//# sourceMappingURL=data:application/json;base64,